;+--------------------------------------------------------------------------
эта программа делает скриншот экрана, а также способна выводить скриншот на экран, а также восстанавливать экран до момента вывода скриншота
;+--------------------------------------------------------------------------
.286
code_seg segment
        ASSUME  CS:CODE_SEG,DS:code_seg,ES:code_seg
	org 100h
start:
    jmp begin
;----------------------------------------------------------------------------

int_2Fh_vector  DD  ?
old_09h         DD  ?

;----------------------------------------------------------------------------
PRINT       PROC FAR
    MOV AH,09H
    INT 21H
    RET
PRINT       ENDP
;============================================================================

;============================================================================
new_09h proc far
	
;
	;добавляет флаги в стек
    pushf
	push    AX
	;ввод с клавиатуры, регистр и номер порта
    in      AL,60h      ; Введем scan-code - клавиатура 
    cmp     AL,58h      ; Это скен-код <F12>, практически порядковый номер клавиши
	je      hotkey      ; Yes
	
    pop     AX          ; No. Восстановим AX
	popf
    jmp     dword ptr CS:[old_09h]  ; В системный обработчик без возврата
hotkey:
	sti                 ; Не будем мешать таймеру
    in      AL,61h      ; Введем содержимое порта B
    or      AL,80h      ; Установим старший бит
    out     61h,AL      ; и вернем в порт B.
    and     AL,7Fh      ; Снова разрешим работу клавиатуры,
    out     61h,AL      ; сбросив старший бит порта B.
	cli
	mov     AL, 20h      ; Пошлем
	;сброс происходит для того, чтобы могли выполнятся прерывания с меньшим приоритетом
	out     20h,AL       ; приказ END OF INTERRUPT (EOF)
	pushf
	pusha
		push cs
		pop ds
		push cs
		pop es
		
		cmp flag,0
		jne metka
			
			inc flag
			cld                 			;Сброс флага df - направление вперед
			mov  	cx,		12*80          	;Счетчик на размер экрана (кол-во слов)
			lea  	di,		bufscr     		;Адрес области куда схранить экран   	
			xor		si,		si				;Адрес области "откуда" от начала экрана (смещение относительно B800h)
			mov 	ax,		0B814h			;начало видеобуфера
			mov 	ds,		ax				;DS-> на видеобуфер; DS на строку 0 видеобуфера
			rep 	movsw							;Пересылаем весь экран в буфер DS:[si] --> es:[di]
			
			push cs
			pop ds
			push dx
			mov dx,offset msg5
			call print
			pop dx
			
			popa
			popf
			sti
			mov     AL, 20h      ; Пошлем
			;сброс происходит для того, чтобы могли выполнятся прерывания с меньшим приоритетом
			out     20h,AL       ; приказ END OF INTERRUPT (EOF)
			sti
			pop     AX
			popf
			iret
 ;-------------   ждем нажатие на клавишу    -------------------------------------------   
		metka:
		cmp flag,1
		jne to_end
			
			cmp phase,0
			jne phase0
				push cs
				pop ds
				cld                 			;Сброс флага df - направление вперед
				mov  	cx,		12*80          	;Счетчик на размер экрана (кол-во слов)
				lea  	di,		bufscr2     		;Адрес области куда схранить экран   	
				xor		si,		si				;Адрес области "откуда" от начала экрана (смещение относительно B800h)
				mov 	ax,		0B814h			;начало видеобуфера
				mov 	ds,		ax				;DS-> на видеобуфер; DS на строку 0 видеобуфера
				rep 	movsw							;Пересылаем весь экран в буфер DS:[si] --> es:[di]
				
				
				push	cs						;
				pop		ds						; ds=cs
				mov  	cx,		12*80			;
				lea  	si,		bufscr     		;Адрес области откуда ds:[si] --> es:[di]
				xor 	di,		di				;
				mov 	ax,		0B814h			;
				mov 	es,		ax				;es-> на видеобуфер; es на строку 0 видеобуфера
				rep 	movsw						;Переслать данные
				inc phase
				jmp to_end
			phase0:
			cmp phase,1
			jne phase1
				push	cs						;
				pop		ds						; ds=cs
				mov  	cx,		12*80			;
				lea  	si,		bufscr2     		;Адрес области откуда ds:[si] --> es:[di]
				xor 	di,		di				;
				mov 	ax,		0B814h			;
				mov 	es,		ax				;es-> на видеобуфер; es на строку 0 видеобуфера
				rep 	movsw						;Переслать данные
				dec phase
				dec flag
			phase1:
;----------------------------------------------------------------------------------------
	to_end:
	push cs
	pop ds
	popa
	popf
	sti
	mov     AL, 20h      ; Пошлем
	;сброс происходит для того, чтобы могли выполнятся прерывания с меньшим приоритетом
	out     20h,AL       ; приказ END OF INTERRUPT (EOF)
	sti
    pop     AX
	popf
    iret
new_09h     endp
;============================================================================
;============================================================================
int_2Fh proc far
    cmp     AH,0C7h         ; Наш номер?
    jne     Pass_2Fh        ; Нет, на выход
    cmp     AL,00h          ; Подфункция проверки на повторную установку?
    je      inst            ; Программа уже установлена
    cmp     AL,01h          ; Подфункция выгрузки?
    je      unins           ; Да, на выгрузку
    jmp     short Pass_2Fh  ; Неизвестная подфункция - на выход
inst:
    mov     AL,0FFh         ; Сообщим о невозможности повторной установки
    iret
Pass_2Fh:
    jmp dword PTR CS:[int_2Fh_vector]
;
; -------------- Проверка - возможна ли выгрузка программы из памяти ? ------
unins:
    push    BX
    push    CX
    push    DX
    push    ES
;
    mov     CX,CS   ; Пригодится для сравнения, т.к. с CS сравнивать нельзя
    mov     AX,3509h    ; Проверить вектор 09h
    int     21h ; Функция 35h в AL - номер прерывания. Возврат-вектор в ES:BX
;
    mov     DX,ES
    cmp     CX,DX
    jne     Not_remove
;
    cmp     BX, offset CS:new_09h
    jne     Not_remove
;
    mov     AX,352Fh    ; Проверить вектор 2Fh
    int     21h ; Функция 35h в AL - номер прерывания. Возврат-вектор в ES:BX
;
    mov     DX,ES
    cmp     CX,DX
    jne     Not_remove
;
    cmp     BX, offset CS:int_2Fh
    jne     Not_remove
; ---------------------- Выгрузка программы из памяти ---------------------
;
    push    DS
;
    lds     DX, CS:old_09h   ; Эта команда эквивалентна следующим двум
;    mov     DX, word ptr old_09h
;    mov     DS, word ptr old_09h+2
    mov     AX,2509h        ; Заполнение вектора старым содержимым
    int     21h
;
    lds     DX, CS:int_2Fh_vector   ; Эта команда эквивалентна следующим двум
;    mov     DX, word ptr int_2Fh_vector
;    mov     DS, word ptr int_2Fh_vector+2
    mov     AX,252Fh
    int     21h
;
    pop     DS
;
    mov     ES,CS:2Ch       ; ES -> окружение
    mov     AH, 49h         ; Функция освобождения блока памяти
    int     21h
;
    mov     AX, CS
    mov     ES, AX          ; ES -> PSP выгрузим саму программу
    mov     AH, 49h         ; Функция освобождения блока памяти
    int     21h
;
    mov     AL,0Fh          ; Признак успешной выгрузки
    jmp     short pop_ret
Not_remove:
    mov     AL,0F0h          ; Признак - выгружать нельзя
pop_ret:
    pop     ES
    pop     DX
    pop     CX
    pop     BX
;
    iret
int_2Fh endp
;============================================================================
begin:
;инициализирующая часть
        mov CL,ES:80h       ; Длина хвоста в PSP
		;начиная с 81 находится хвост, в котором параметры
        cmp CL,0            ; Длина хвоста=0?
        je  check_install   ; Да, программа запущена без параметров,
                            ; попробуем установить
        xor CH,CH       ; CX=CL= длина хвоста
        cld             ; DF=0 - флаг направления вперед
        mov DI, 81h     ; ES:DI-> начало хвоста в PSP
        mov SI,offset key   ; DS:SI-> поле key
        mov AL,' '          ; Уберем пробелы из начала хвоста
repe    scasb   ; Сканируем хвост пока пробелы
                ; AL - (ES:DI) -> флаги процессора
                ; повторять пока элементы равны
        dec DI          ; DI-> на первый символ после пробелов
        mov CX, 4       ; ожидаемая длина команды
repe    cmpsb   ; Сравниваем введенный хвост с ожидаемым
                ; (DS:DI)-(ES:DI) -> флаги процессора
        jne check_install ; Неизвестная команда - попробуем установить
        inc flag_off
; Проверим, не установлена ли уже эта программа
check_install:
        mov AX,0C700h   ; AH=0C7h номер процесса C7h
		;; выбрали номер C7, он закреплен за нашей программой
                        ; AL=00h -дать статус установки процесса
						;; для проверки, есть ли в памяти
        int 2Fh         ; мультиплексное прерывание
		;;проходит через все обработчики C7 -пользовательский номер
        cmp AL,0FFh
		; проверяет, установлена ли уже
        je  already_ins ; возвращает AL=0FFh если установлена
;----------------------------------------------------------------------------
    cmp flag_off,1
    je  xm_stranno
;----------------------------------------------------------------------------
    ; штатная установка программы
	
	;получение вектора
	mov AX,352Fh                      ;   получить с помощью 35 функции в АН и 2Ф в АЛ
                                      ;   вектор
    int 21h                           ;   прерывания  2Fh
	
    mov word ptr int_2Fh_vector,BX    ;   ES:BX - вектор
    mov word ptr int_2Fh_vector+2,ES  ;
;
	
	;установка вектора
    mov DX,offset int_2Fh           ;   получить смещение точки входа в новый
                                    ;   обработчик на DX
    mov AX,252Fh                    ;   функция установки прерывания
                                    ;   изменить вектор 2Fh
    int 21h  ; AL - номер прерыв. DS:DX - указатель программы обработки прер.
;============================================================================
    mov AX,3509h                        ;   получить
                                        ;   вектор
    int 21h                             ;   прерывания  09h
    mov word ptr old_09h,BX    ;   ES:BX - вектор
    mov word ptr old_09h+2,ES  ;
    mov DX,offset new_09h           ;   получить смещение точки входа в новый
;                                   ;   обработчик на DX
    mov AX,2509h                        ;   функция установки прерывания
                                        ;   изменить вектор 09h
    int 21h ;   AL - номер прерыв. DS:DX - указатель программы обработки прер.
;
	
	mov DX,offset msg1
    
    call    print
;----------------------------------------------------------------------------
    mov DX,offset   begin           ;   оставить программу ...
    int 27h                         ;   ... резидентной и выйти
;============================================================================
already_ins:
        cmp flag_off,1      ; Запрос на выгрузку установлен?
        je  uninstall       ; Да, на выгрузку
        lea DX,msg          ; Вывод на экран сообщения: already installed!
        call    print
        int 20h
; ------------------ Выгрузка -----------------------------------------------
 uninstall:
        mov AX,0C701h  ; AH=0C7h номер процесса C7h, подфункция 01h-выгрузка
        int 2Fh             ; мультиплексное прерывание
        cmp AL,0F0h
        je  not_sucsess
        cmp AL,0Fh
        jne not_sucsess
        mov DX,offset msg2  ; Сообщение о выгрузке
        call    print
        int 20h
not_sucsess:
        mov DX,offset msg3  ; Сообщение, что выгрузка невозможна
        call    print
        int 20h
xm_stranno:
        mov DX,offset msg4  ; Сообщение, программы нет, а пользователь
        call    print       ; дает команду выгрузки
        int 20h
;----------------------------------------------------------------------------
key         DB  '/off'
flag_off    DB  0
msg         DB  'already '
msg1        DB  'installed',13,10,'$'
msg4        DB  'just '
msg3        DB  'not '
msg2        DB  'uninstalled',13,10,'$'
msg5		DB	'screenshot taken',13,10,'$'
bufscr   dw   25*80 dup(?)				; буфер для сохранения экрана
bufscr2	 dw   25*80 dup(?)
flag        DB  0
phase		DB	0
;;============================================================================
code_seg ends
         end start
